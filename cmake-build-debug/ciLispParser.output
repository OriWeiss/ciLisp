Grammar

    0 $accept: program $end

    1 program: s_expr EOL

    2 scope: LPAREN LET let_list RPAREN

    3 let_list: let_elem
    4         | let_list let_elem

    5 let_elem: LPAREN TYPE SYMBOL s_expr RPAREN
    6         | LPAREN SYMBOL s_expr RPAREN
    7         | LPAREN TYPE SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN
    8         | LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    9 s_expr: NUMBER
   10       | LPAREN FUNC s_expr_list RPAREN
   11       | LPAREN FUNC RPAREN
   12       | SYMBOL
   13       | LPAREN scope s_expr RPAREN
   14       | LPAREN s_expr RPAREN
   15       | LPAREN COND s_expr_list RPAREN
   16       | LPAREN SYMBOL s_expr_list RPAREN
   17       | QUIT
   18       | error

   19 arg_list: SYMBOL arg_list
   20         | SYMBOL

   21 s_expr_list: s_expr s_expr_list
   22            | s_expr


Terminals, with rules where they appear

$end (0) 0
error (256) 18
FUNC (258) 10 11
SYMBOL (259) 5 6 7 8 12 16 19 20
TYPE (260) 5 7
NUMBER (261) 9
LPAREN (262) 2 5 6 7 8 10 11 13 14 15 16
RPAREN (263) 2 5 6 7 8 10 11 13 14 15 16
EOL (264) 1
QUIT (265) 17
LET (266) 2
COND (267) 15
LAMBDA (268) 7 8


Nonterminals, with rules where they appear

$accept (14)
    on left: 0
program (15)
    on left: 1, on right: 0
scope (16)
    on left: 2, on right: 13
let_list (17)
    on left: 3 4, on right: 2 4
let_elem (18)
    on left: 5 6 7 8, on right: 3 4
s_expr (19)
    on left: 9 10 11 12 13 14 15 16 17 18, on right: 1 5 6 7 8 13 14
    21 22
arg_list (20)
    on left: 19 20, on right: 7 8 19
s_expr_list (21)
    on left: 21 22, on right: 10 15 16 21


State 0

    0 $accept: . program $end

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    program  go to state 6
    s_expr   go to state 7


State 1

   18 s_expr: error .

    $default  reduce using rule 18 (s_expr)


State 2

   12 s_expr: SYMBOL .

    $default  reduce using rule 12 (s_expr)


State 3

    9 s_expr: NUMBER .

    $default  reduce using rule 9 (s_expr)


State 4

   10 s_expr: LPAREN . FUNC s_expr_list RPAREN
   11       | LPAREN . FUNC RPAREN
   13       | LPAREN . scope s_expr RPAREN
   14       | LPAREN . s_expr RPAREN
   15       | LPAREN . COND s_expr_list RPAREN
   16       | LPAREN . SYMBOL s_expr_list RPAREN

    error   shift, and go to state 1
    FUNC    shift, and go to state 8
    SYMBOL  shift, and go to state 9
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 10
    QUIT    shift, and go to state 5
    COND    shift, and go to state 11

    scope   go to state 12
    s_expr  go to state 13


State 5

   17 s_expr: QUIT .

    $default  reduce using rule 17 (s_expr)


State 6

    0 $accept: program . $end

    $end  shift, and go to state 14


State 7

    1 program: s_expr . EOL

    EOL  shift, and go to state 15


State 8

   10 s_expr: LPAREN FUNC . s_expr_list RPAREN
   11       | LPAREN FUNC . RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 4
    RPAREN  shift, and go to state 16
    QUIT    shift, and go to state 5

    s_expr       go to state 17
    s_expr_list  go to state 18


State 9

   12 s_expr: SYMBOL .
   16       | LPAREN SYMBOL . s_expr_list RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    RPAREN  reduce using rule 12 (s_expr)

    s_expr       go to state 17
    s_expr_list  go to state 19


State 10

    2 scope: LPAREN . LET let_list RPAREN
   10 s_expr: LPAREN . FUNC s_expr_list RPAREN
   11       | LPAREN . FUNC RPAREN
   13       | LPAREN . scope s_expr RPAREN
   14       | LPAREN . s_expr RPAREN
   15       | LPAREN . COND s_expr_list RPAREN
   16       | LPAREN . SYMBOL s_expr_list RPAREN

    error   shift, and go to state 1
    FUNC    shift, and go to state 8
    SYMBOL  shift, and go to state 9
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 10
    QUIT    shift, and go to state 5
    LET     shift, and go to state 20
    COND    shift, and go to state 11

    scope   go to state 12
    s_expr  go to state 13


State 11

   15 s_expr: LPAREN COND . s_expr_list RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    s_expr       go to state 17
    s_expr_list  go to state 21


State 12

   13 s_expr: LPAREN scope . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    s_expr  go to state 22


State 13

   14 s_expr: LPAREN s_expr . RPAREN

    RPAREN  shift, and go to state 23


State 14

    0 $accept: program $end .

    $default  accept


State 15

    1 program: s_expr EOL .

    $default  reduce using rule 1 (program)


State 16

   11 s_expr: LPAREN FUNC RPAREN .

    $default  reduce using rule 11 (s_expr)


State 17

   21 s_expr_list: s_expr . s_expr_list
   22            | s_expr .

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    RPAREN  reduce using rule 22 (s_expr_list)

    s_expr       go to state 17
    s_expr_list  go to state 24


State 18

   10 s_expr: LPAREN FUNC s_expr_list . RPAREN

    RPAREN  shift, and go to state 25


State 19

   16 s_expr: LPAREN SYMBOL s_expr_list . RPAREN

    RPAREN  shift, and go to state 26


State 20

    2 scope: LPAREN LET . let_list RPAREN

    LPAREN  shift, and go to state 27

    let_list  go to state 28
    let_elem  go to state 29


State 21

   15 s_expr: LPAREN COND s_expr_list . RPAREN

    RPAREN  shift, and go to state 30


State 22

   13 s_expr: LPAREN scope s_expr . RPAREN

    RPAREN  shift, and go to state 31


State 23

   14 s_expr: LPAREN s_expr RPAREN .

    $default  reduce using rule 14 (s_expr)


State 24

   21 s_expr_list: s_expr s_expr_list .

    $default  reduce using rule 21 (s_expr_list)


State 25

   10 s_expr: LPAREN FUNC s_expr_list RPAREN .

    $default  reduce using rule 10 (s_expr)


State 26

   16 s_expr: LPAREN SYMBOL s_expr_list RPAREN .

    $default  reduce using rule 16 (s_expr)


State 27

    5 let_elem: LPAREN . TYPE SYMBOL s_expr RPAREN
    6         | LPAREN . SYMBOL s_expr RPAREN
    7         | LPAREN . TYPE SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN
    8         | LPAREN . SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 32
    TYPE    shift, and go to state 33


State 28

    2 scope: LPAREN LET let_list . RPAREN
    4 let_list: let_list . let_elem

    LPAREN  shift, and go to state 27
    RPAREN  shift, and go to state 34

    let_elem  go to state 35


State 29

    3 let_list: let_elem .

    $default  reduce using rule 3 (let_list)


State 30

   15 s_expr: LPAREN COND s_expr_list RPAREN .

    $default  reduce using rule 15 (s_expr)


State 31

   13 s_expr: LPAREN scope s_expr RPAREN .

    $default  reduce using rule 13 (s_expr)


State 32

    6 let_elem: LPAREN SYMBOL . s_expr RPAREN
    8         | LPAREN SYMBOL . LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5
    LAMBDA  shift, and go to state 36

    s_expr  go to state 37


State 33

    5 let_elem: LPAREN TYPE . SYMBOL s_expr RPAREN
    7         | LPAREN TYPE . SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 38


State 34

    2 scope: LPAREN LET let_list RPAREN .

    $default  reduce using rule 2 (scope)


State 35

    4 let_list: let_list let_elem .

    $default  reduce using rule 4 (let_list)


State 36

    8 let_elem: LPAREN SYMBOL LAMBDA . LPAREN arg_list RPAREN s_expr RPAREN

    LPAREN  shift, and go to state 39


State 37

    6 let_elem: LPAREN SYMBOL s_expr . RPAREN

    RPAREN  shift, and go to state 40


State 38

    5 let_elem: LPAREN TYPE SYMBOL . s_expr RPAREN
    7         | LPAREN TYPE SYMBOL . LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5
    LAMBDA  shift, and go to state 41

    s_expr  go to state 42


State 39

    8 let_elem: LPAREN SYMBOL LAMBDA LPAREN . arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 43

    arg_list  go to state 44


State 40

    6 let_elem: LPAREN SYMBOL s_expr RPAREN .

    $default  reduce using rule 6 (let_elem)


State 41

    7 let_elem: LPAREN TYPE SYMBOL LAMBDA . LPAREN arg_list RPAREN s_expr RPAREN

    LPAREN  shift, and go to state 45


State 42

    5 let_elem: LPAREN TYPE SYMBOL s_expr . RPAREN

    RPAREN  shift, and go to state 46


State 43

   19 arg_list: SYMBOL . arg_list
   20         | SYMBOL .

    SYMBOL  shift, and go to state 43

    $default  reduce using rule 20 (arg_list)

    arg_list  go to state 47


State 44

    8 let_elem: LPAREN SYMBOL LAMBDA LPAREN arg_list . RPAREN s_expr RPAREN

    RPAREN  shift, and go to state 48


State 45

    7 let_elem: LPAREN TYPE SYMBOL LAMBDA LPAREN . arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 43

    arg_list  go to state 49


State 46

    5 let_elem: LPAREN TYPE SYMBOL s_expr RPAREN .

    $default  reduce using rule 5 (let_elem)


State 47

   19 arg_list: SYMBOL arg_list .

    $default  reduce using rule 19 (arg_list)


State 48

    8 let_elem: LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    s_expr  go to state 50


State 49

    7 let_elem: LPAREN TYPE SYMBOL LAMBDA LPAREN arg_list . RPAREN s_expr RPAREN

    RPAREN  shift, and go to state 51


State 50

    8 let_elem: LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr . RPAREN

    RPAREN  shift, and go to state 52


State 51

    7 let_elem: LPAREN TYPE SYMBOL LAMBDA LPAREN arg_list RPAREN . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    NUMBER  shift, and go to state 3
    LPAREN  shift, and go to state 4
    QUIT    shift, and go to state 5

    s_expr  go to state 53


State 52

    8 let_elem: LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN .

    $default  reduce using rule 8 (let_elem)


State 53

    7 let_elem: LPAREN TYPE SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr . RPAREN

    RPAREN  shift, and go to state 54


State 54

    7 let_elem: LPAREN TYPE SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN .

    $default  reduce using rule 7 (let_elem)
